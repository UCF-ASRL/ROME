// Include the ROME library.
#include <ROME.h>

// Instantiate four motors with their respective pins.
// Arguments for ROME (PWM pin (yellow), Hall Effect sensor pin (blue), Relay pin (one of 4 colors))
ROME motor1(6,2,9);  
ROME motor2(5,3,10); 
ROME motor3(7,18,11);
ROME motor4(8,19,12);

// These arrays will store values for controlling the motors.
float u1_values[] = {0, 0, 1.549200e+00, 2.667300e+00, 3.474400e+00, 4.056800e+00, 4.477200e+00, 4.780700e+00, 4.999700e+00, 5.157700e+00, 5.271800e+00, 5.354200e+00, 5.413600e+00, 5.456500e+00, 5.487500e+00, 5.509800e+00, 5.525900e+00, 5.537600e+00, 5.546000e+00, 5.552000e+00, 5.556400e+00, 5.559600e+00, 5.561900e+00, 5.563500e+00, 5.564700e+00, 5.565500e+00, 5.566200e+00, 2.468200e+00, 2.322700e-01, -1.381600e+00, -2.546300e+00, -3.387000e+00, -3.993800e+00, -4.431800e+00, -4.747800e+00, -4.976000e+00, -5.140600e+00, -5.259500e+00, -5.345300e+00, -5.407200e+00, -5.451900e+00, -5.484100e+00, -5.507400e+00, -5.524200e+00, -5.536300e+00, -5.545100e+00, -5.551400e+00, -5.555900e+00, -5.559200e+00, -5.561600e+00, -5.563300e+00, -5.564600e+00, -5.565500e+00, -5.566100e+00, -5.566600e+00, -5.566900e+00, -5.567100e+00, -5.567300e+00, -5.567400e+00, -5.567500e+00, -5.567600e+00, -5.567600e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -2.469400e+00, -2.331000e-01, 1.381000e+00, 2.545900e+00, 3.386700e+00, 3.993600e+00, 4.431600e+00, 4.747700e+00, 4.975900e+00, 5.140600e+00, 5.259400e+00, 5.345200e+00, 5.407200e+00, 5.451800e+00, 5.484100e+00, 5.507400e+00, 5.524200e+00, 5.536300e+00, 5.545100e+00, 5.551400e+00, 5.555900e+00, 5.559200e+00, 5.561600e+00, 5.563300e+00, 5.564600e+00, 5.565500e+00, 5.566100e+00, 5.566600e+00, 5.566900e+00, 5.567100e+00, 5.567300e+00, 5.567400e+00, 5.567500e+00, 5.567600e+00, 5.567600e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 2.469400e+00, 2.331000e-01, -1.381000e+00, -2.545900e+00, -3.386700e+00, -3.993600e+00, -4.431600e+00, -4.747700e+00, -4.975900e+00, -5.140600e+00, -5.259400e+00, -5.345200e+00, -5.407200e+00, -5.451800e+00, -5.484100e+00, -5.507400e+00, -5.524200e+00, -5.536300e+00, -5.545100e+00, -5.551400e+00, -5.555900e+00, -5.559200e+00, -5.561600e+00, -5.563300e+00};
float u2_values[] = {0, 0, 1.549200e+00, 2.667300e+00, 3.474400e+00, 4.056800e+00, 4.477200e+00, 4.780700e+00, 4.999700e+00, 5.157700e+00, 5.271800e+00, 5.354200e+00, 5.413600e+00, 5.456500e+00, 5.487500e+00, 5.509800e+00, 5.525900e+00, 5.537600e+00, 5.546000e+00, 5.552000e+00, 5.556400e+00, 5.559600e+00, 5.561900e+00, 5.563500e+00, 5.564700e+00, 5.565500e+00, 5.566200e+00, 5.566600e+00, 5.566900e+00, 5.567200e+00, 5.567300e+00, 5.567500e+00, 5.567500e+00, 5.567600e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 2.469400e+00, 2.331000e-01, -1.381000e+00, -2.545900e+00, -3.386700e+00, -3.993600e+00, -4.431600e+00, -4.747700e+00, -4.975900e+00, -5.140600e+00, -5.259400e+00, -5.345200e+00, -5.407200e+00, -5.451800e+00, -5.484100e+00, -5.507400e+00, -5.524200e+00, -5.536300e+00, -5.545100e+00, -5.551400e+00, -5.555900e+00, -5.559200e+00, -5.561600e+00, -5.563300e+00, -5.564600e+00, -5.565500e+00, -5.566100e+00, -5.566600e+00, -5.566900e+00, -5.567100e+00, -5.567300e+00, -5.567400e+00, -5.567500e+00, -5.567600e+00, -5.567600e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -2.469400e+00, -2.331000e-01, 1.381000e+00, 2.545900e+00, 3.386700e+00, 3.993600e+00, 4.431600e+00, 4.747700e+00, 4.975900e+00, 5.140600e+00, 5.259400e+00, 5.345200e+00, 5.407200e+00, 5.451800e+00, 5.484100e+00, 5.507400e+00, 5.524200e+00, 5.536300e+00, 5.545100e+00, 5.551400e+00, 5.555900e+00, 5.559200e+00, 5.561600e+00, 5.563300e+00, 5.564600e+00, 5.565500e+00, 5.566100e+00, 5.566600e+00, 5.566900e+00, 5.567100e+00, 5.567300e+00, 5.567400e+00, 5.567500e+00, 5.567600e+00, 5.567600e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00};
float u3_values[] = {0, 0, -1.549200e+00, -2.667300e+00, -3.474400e+00, -4.056800e+00, -4.477200e+00, -4.780700e+00, -4.999700e+00, -5.157700e+00, -5.271800e+00, -5.354200e+00, -5.413600e+00, -5.456500e+00, -5.487500e+00, -5.509800e+00, -5.525900e+00, -5.537600e+00, -5.546000e+00, -5.552000e+00, -5.556400e+00, -5.559600e+00, -5.561900e+00, -5.563500e+00, -5.564700e+00, -5.565500e+00, -5.566200e+00, -2.468200e+00, -2.322700e-01, 1.381600e+00, 2.546300e+00, 3.387000e+00, 3.993800e+00, 4.431800e+00, 4.747800e+00, 4.976000e+00, 5.140600e+00, 5.259500e+00, 5.345300e+00, 5.407200e+00, 5.451900e+00, 5.484100e+00, 5.507400e+00, 5.524200e+00, 5.536300e+00, 5.545100e+00, 5.551400e+00, 5.555900e+00, 5.559200e+00, 5.561600e+00, 5.563300e+00, 5.564600e+00, 5.565500e+00, 5.566100e+00, 5.566600e+00, 5.566900e+00, 5.567100e+00, 5.567300e+00, 5.567400e+00, 5.567500e+00, 5.567600e+00, 5.567600e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 2.469400e+00, 2.331000e-01, -1.381000e+00, -2.545900e+00, -3.386700e+00, -3.993600e+00, -4.431600e+00, -4.747700e+00, -4.975900e+00, -5.140600e+00, -5.259400e+00, -5.345200e+00, -5.407200e+00, -5.451800e+00, -5.484100e+00, -5.507400e+00, -5.524200e+00, -5.536300e+00, -5.545100e+00, -5.551400e+00, -5.555900e+00, -5.559200e+00, -5.561600e+00, -5.563300e+00, -5.564600e+00, -5.565500e+00, -5.566100e+00, -5.566600e+00, -5.566900e+00, -5.567100e+00, -5.567300e+00, -5.567400e+00, -5.567500e+00, -5.567600e+00, -5.567600e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -2.469400e+00, -2.331000e-01, 1.381000e+00, 2.545900e+00, 3.386700e+00, 3.993600e+00, 4.431600e+00, 4.747700e+00, 4.975900e+00, 5.140600e+00, 5.259400e+00, 5.345200e+00, 5.407200e+00, 5.451800e+00, 5.484100e+00, 5.507400e+00, 5.524200e+00, 5.536300e+00, 5.545100e+00, 5.551400e+00, 5.555900e+00, 5.559200e+00, 5.561600e+00, 5.563300e+00};
float u4_values[] = {0, 0, -1.549200e+00, -2.667300e+00, -3.474400e+00, -4.056800e+00, -4.477200e+00, -4.780700e+00, -4.999700e+00, -5.157700e+00, -5.271800e+00, -5.354200e+00, -5.413600e+00, -5.456500e+00, -5.487500e+00, -5.509800e+00, -5.525900e+00, -5.537600e+00, -5.546000e+00, -5.552000e+00, -5.556400e+00, -5.559600e+00, -5.561900e+00, -5.563500e+00, -5.564700e+00, -5.565500e+00, -5.566200e+00, -5.566600e+00, -5.566900e+00, -5.567200e+00, -5.567300e+00, -5.567500e+00, -5.567500e+00, -5.567600e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -2.469400e+00, -2.331000e-01, 1.381000e+00, 2.545900e+00, 3.386700e+00, 3.993600e+00, 4.431600e+00, 4.747700e+00, 4.975900e+00, 5.140600e+00, 5.259400e+00, 5.345200e+00, 5.407200e+00, 5.451800e+00, 5.484100e+00, 5.507400e+00, 5.524200e+00, 5.536300e+00, 5.545100e+00, 5.551400e+00, 5.555900e+00, 5.559200e+00, 5.561600e+00, 5.563300e+00, 5.564600e+00, 5.565500e+00, 5.566100e+00, 5.566600e+00, 5.566900e+00, 5.567100e+00, 5.567300e+00, 5.567400e+00, 5.567500e+00, 5.567600e+00, 5.567600e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567700e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 5.567800e+00, 2.469400e+00, 2.331000e-01, -1.381000e+00, -2.545900e+00, -3.386700e+00, -3.993600e+00, -4.431600e+00, -4.747700e+00, -4.975900e+00, -5.140600e+00, -5.259400e+00, -5.345200e+00, -5.407200e+00, -5.451800e+00, -5.484100e+00, -5.507400e+00, -5.524200e+00, -5.536300e+00, -5.545100e+00, -5.551400e+00, -5.555900e+00, -5.559200e+00, -5.561600e+00, -5.563300e+00, -5.564600e+00, -5.565500e+00, -5.566100e+00, -5.566600e+00, -5.566900e+00, -5.567100e+00, -5.567300e+00, -5.567400e+00, -5.567500e+00, -5.567600e+00, -5.567600e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567700e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00, -5.567800e+00};
float timeValues[] = {0, 2.000000e-01, 4.000000e-01, 6.000000e-01, 8.000000e-01, 1, 1.200000e+00, 1.400000e+00, 1.600000e+00, 1.800000e+00, 2, 2.200000e+00, 2.400000e+00, 2.600000e+00, 2.800000e+00, 3, 3.200000e+00, 3.400000e+00, 3.600000e+00, 3.800000e+00, 4, 4.200000e+00, 4.400000e+00, 4.600000e+00, 4.800000e+00, 5, 5.200000e+00, 5.400000e+00, 5.600000e+00, 5.800000e+00, 6, 6.200000e+00, 6.400000e+00, 6.600000e+00, 6.800000e+00, 7, 7.200000e+00, 7.400000e+00, 7.600000e+00, 7.800000e+00, 8, 8.200000e+00, 8.400000e+00, 8.600000e+00, 8.800000e+00, 9, 9.200000e+00, 9.400000e+00, 9.600000e+00, 9.800000e+00, 10, 1.020000e+01, 1.040000e+01, 1.060000e+01, 1.080000e+01, 11, 1.120000e+01, 1.140000e+01, 1.160000e+01, 1.180000e+01, 12, 1.220000e+01, 1.240000e+01, 1.260000e+01, 1.280000e+01, 13, 1.320000e+01, 1.340000e+01, 1.360000e+01, 1.380000e+01, 14, 1.420000e+01, 1.440000e+01, 1.460000e+01, 1.480000e+01, 15, 1.520000e+01, 1.540000e+01, 1.560000e+01, 1.580000e+01, 16, 1.620000e+01, 1.640000e+01, 1.660000e+01, 1.680000e+01, 17, 1.720000e+01, 1.740000e+01, 1.760000e+01, 1.780000e+01, 18, 1.820000e+01, 1.840000e+01, 1.860000e+01, 1.880000e+01, 19, 1.920000e+01, 1.940000e+01, 1.960000e+01, 1.980000e+01, 20, 2.020000e+01, 2.040000e+01, 2.060000e+01, 2.080000e+01, 21, 2.120000e+01, 2.140000e+01, 2.160000e+01, 2.180000e+01, 22, 2.220000e+01, 2.240000e+01, 2.260000e+01, 2.280000e+01, 23, 2.320000e+01, 2.340000e+01, 2.360000e+01, 2.380000e+01, 24, 2.420000e+01, 2.440000e+01, 2.460000e+01, 2.480000e+01, 25, 2.520000e+01, 2.540000e+01, 2.560000e+01, 2.580000e+01, 26, 2.620000e+01, 2.640000e+01, 2.660000e+01, 2.680000e+01, 27, 2.720000e+01, 2.740000e+01, 2.760000e+01, 2.780000e+01, 28, 2.820000e+01, 2.840000e+01, 2.860000e+01, 2.880000e+01, 29, 2.920000e+01, 2.940000e+01, 2.960000e+01, 2.980000e+01, 30};


// Calculate the number of values in one of the arrays.
// It's assumed that all arrays are of the same length.
const int numberOfValues = sizeof(u1_values) / sizeof(u1_values[0]);

// currentIndex keeps track of which set of values (from the arrays) is currently being used to control the motors.
int currentIndex = 0;

// An array that stores the previous direction of each motor. // 1 indicates forward and -1 indicates reverse, 0 off.
int previousDirection[] = {0, 0, 0, 0};

// Create an array of ROME motor objects for easier looping and control.
ROME motors[] = {motor1, motor2, motor3, motor4};

void setup() 
{
  Serial.begin(9600);
}

// This function runs repeatedly after the setup() finishes.
void loop() {
    if (currentIndex < numberOfValues) {
        float speeds[] = {u1_values[currentIndex], u2_values[currentIndex], u3_values[currentIndex], u4_values[currentIndex]};
        
        bool* directionChanges = needsDirectionChange(speeds);

        // Loop through each motor to see if it needs a direction change
        for (int i = 0; i < 4; i++) {
            if (directionChanges[i]) {
                motors[i].disableMotor();
            }
        }

        //delay(0); // This delay is constant and might be necessary for the direction change and reactivation of the motor.

        // Set the direction for each motor based on the speeds array.
        setAllDirections(speeds);

        for (int i = 0; i < 4; i++) {
            setMotorSpeed(motors[i], speeds[i]);
        }

        currentIndex++;

        // Compute the delay based on the difference between the current time and the previous time
        if (currentIndex < numberOfValues) {
            float timeDifference = timeValues[currentIndex] - timeValues[currentIndex - 1];
            delay(timeDifference*1000); // Assuming timeValues[] is in seconds and delay() function expects milliseconds
        }
    } else {
        motor1.disableMotor();
        motor2.disableMotor();
        motor3.disableMotor();
        motor4.disableMotor();
        
        while(1); // Infinite loop once done
    }
}


// Given a motor, its previous direction, and the current speed value, 
// this function sets the direction of the motor.
void setMotorDirection(ROME &motor, int &previousDir, float currentSpeedValue) {
    // Determine the current direction based on the sign of the speed value.
    int currentDir = (currentSpeedValue >= 0) ? 1 : -1; 
    
    // If the direction has changed, stop the motor briefly.
    if (previousDir != currentDir) {
        motor.disableMotor();
        //delay(50); // TODO: Delay is set to 80 Should it be another value?
    }

    // Set the motor's direction based on the determined current direction.
    if (currentDir > 0) {
        motor.motorForward();
    } else {
        motor.motorReverse();
    }
    
    // Update the stored previous direction for the next check.
    previousDir = currentDir;
}

// Given a motor and a speed value, this function sets the speed of the motor.
void setMotorSpeed(ROME &motor, float currentSpeedValue) {
    // Map the given speed value to an appropriate range for the motor.
    int currentSpeed = map(currentSpeedValue, -19.5192, 19.5192, -255, 255);
    
    // Activate the motor with the mapped speed value.
    motor.motorOn(abs(currentSpeed));
}

// This function sets the direction of all motors based on the given speeds array.
void setAllDirections(float speeds[]) {
    for (int i = 0; i < 4; i++) {
        setMotorDirection(motors[i], previousDirection[i], speeds[i]);
    }
}

// This function checks if any motor needs to change its direction based on the provided speeds.
bool* needsDirectionChange(float speeds[]) {
    static bool directionChange[4];
    for (int i = 0; i < 4; i++) {
        int currentDir = (speeds[i] >= 0) ? 1 : -1;
        if (previousDirection[i] != currentDir) {
            directionChange[i] = true;
        } else {
            directionChange[i] = false;
        }
    }
    return directionChange;
}